outliers_V4<-boxplot(Assess$V4)$out
boxplot(Assess$V1)
outliers_V1<-boxplot(Assess$V1)$out
Assess[which(Assess %in% outliers_V1),]
Assess[which(Assess$V1 %in% outliers_V1),]
boxplot(Assess$V1)
boxplot(Assess$V1)$out
Assess<-Assess[-which(Assess$V1 %in% outliers_V1),]
Assess<-Assess[-which(Assess$V4 %in% outliers_V4),]
boxplot(Assess$V4)$out
boxplot(Assess$V1)$out
#Build Model
TrainData<-createDataPartition(y=Assess$V5,p=0.75,list=FALSE)
#Build Model
TrainData<-createDataPartition(y=Assess$V5,p=0.75,list=FALSE)
training<-Assess[TrainData,]
testing<-Assess[-TrainData,]
#Build Model
set.seed(123)
TrainData<-createDataPartition(y=Assess$V5,p=0.75,list=FALSE)
training<-Assess[TrainData,]
testing<-Assess[-TrainData,]
#
Ctrl<-trainControl(method = "repeatedcv",#This_is_CROSS_VALIDATION
number = 5,
repeats = 5,
verboseIter = TRUE,
classProbs = TRUE)
#
set.seed(111)
knnFit<-train(V5~.,#alternative_being:_(brand~.,)
data = training,
method = "knn",
trControl=Ctrl,
tuneLength = 5) #,
#
Ctrl<-trainControl(method = "repeatedcv",#This_is_CROSS_VALIDATION
number = 5,
repeats = 5,
verboseIter = TRUE)
#classProbs = TRUE)
#
set.seed(111)
knnFit<-train(V5~.,#alternative_being:_(brand~.,)
data = training,
method = "knn",
trControl=Ctrl,
tuneLength = 5) #,
Assess[sapply(Assess,function(x) all(x)==0),]
AssessSinZero<-Assess[sapply(Assess,function(x) !all(x)==0),]
#preProc = c("center", "scale"))
knnFit
unique(Assess$V5)
#
#Predict
kNN_Predict<-predict(knnFit,newdata = testing)
#str(kNN_Predict)
#plot(knnFit)
kNN_Predict
kNN_Probs<-predict(knnFit,newdata = testing,type = "prob")
head(kNN_Probs)
confusionMatrix(data = kNN_Predict,testing$V5)
#
postResample(kNN_Predict,testing$V5)
#______________________________________________RANDOM_FOREST______________________________________
set.seed(111)
RF_Fit<-train(V5~.,#alternative_being:_(brand~.,)
data = training,
method = "rf",
ntree = 10,
#metric = "Accuracy",
trControl=ctrl_RF,
tuneLength = 3,
preProc = c("center", "scale"))
RF_Fit<-train(V5~.,#alternative_being:_(brand~.,)
data = training,
method = "rf",
ntree = 10,
#metric = "Accuracy",
trControl=Ctrl,
tuneLength = 3,
preProc = c("center", "scale"))
RF_Fit
#plot(RF_Fit)
#Predict
RF_Predict<-predict(RF_Fit,newdata = testing)
#str(RF_Predict)
RF_Probs<-predict(RF_Fit,newdata = testing,type = "prob")
head(RF_Probs)
confusionMatrix(data = RF_Predict,testing$V5)
#
postResample(RF_Predict,testing$V5)
RF_Predict
#Task: Deploy a wifi-fingerprint-based navigation system Â´that shall be installed wihtin industrial buildings
#----> determine a person's location in indoor spaces
Wifi<-read.csv(file = "C:/Users/alexw/Desktop/Ubiqum/Section3/Task3_Wifi_fingerprinting/trainingData.csv",header = TRUE)
Wifi_Vald<-read.csv(file = "C:/Users/alexw/Desktop/Ubiqum/Section3/Task3_Wifi_fingerprinting/validationData.csv",header = TRUE)
#
#wifi1<-Wifi[,c(1:10,521:529)]
Wifi[,ncol(Wifi)]<-as.POSIXct(Wifi[,ncol(Wifi)],origin='1970-01-01')
Wifi_Vald[,ncol(Wifi_Vald)]<-as.POSIXct(Wifi_Vald[,ncol(Wifi_Vald)],origin='1970-01-01')
#
Wifi<-transform(Wifi,UniquePosit=paste0(BUILDINGID,FLOOR))
Wifi_Vald<-transform(Wifi_Vald,UniquePosit=paste0(BUILDINGID,FLOOR))
#unique(Wifi$UniquePosit)
#unique(Wifi$USERID)
#
haurein<-Wifi1%>%dplyr::select(USERID,UniquePosit)%>%
dplyr::group_by(USERID)%>%
summarize(UP00=sum(UniquePosit=="00"),
UP01=sum(UniquePosit=="01"),
UP02=sum(UniquePosit=="02"),
UP03=sum(UniquePosit=="03"),
UP10=sum(UniquePosit=="10"),
UP11=sum(UniquePosit=="11"),
UP12=sum(UniquePosit=="12"),
UP13=sum(UniquePosit=="13"),
UP20=sum(UniquePosit=="20"),
UP21=sum(UniquePosit=="21"),
UP22=sum(UniquePosit=="22"),
UP23=sum(UniquePosit=="23"),
UP24=sum(UniquePosit=="24"))
#unique(Wifi$UniquePosit)
#unique(Wifi$USERID)
#
#SpaceID_unique<-Wifi1%>%dplyr::select(UniquePosit,SPACEID)%>%
#  dplyr::group_by(UniquePosit)%>%
#  summarize(Min_SpaceID=min(SPACEID),
#            Mean_SPACEID=mean(SPACEID),
#            Max_SpaceID=max(SPACEID))
#Convert Values of 100 to -100 so that afterwards columns with values only smaller than -80 can be omitted,
#as they suggest a weak signal
Wifi[Wifi==100]<- (-100)
#Wifi1<-Wifi[,sapply(Wifi[1:520],function(x) all(x==100))]
Wifi1<-Wifi[,sapply(Wifi[1:528],function(x) !all(x < (-80)))]
Wifi1<-Wifi[apply(Wifi[1:528],1,function(x) !all(x < (-80)))]
Wifi1<-Wifi[apply(Wifi,1,function(x) !all(x < (-80)))]
View(Wifi1)
Wifi1<-Wifi[sapply(Wifi,function(x) !all(x < (-80))),1:326]
Wifi1<-Wifi1[sapply(Wifi1,function(x) !all(x < (-80))),1:326]
#Wifi1<-Wifi[,sapply(Wifi[1:520],function(x) all(x==100))]
Wifi1<-Wifi[,sapply(Wifi[1:528],function(x) !all(x < (-80)))]
tail(colnames(Wifi1))
View(Wifi1)
Wifi1<-Wifi1[sapply(Wifi1,function(x) !all(x < (-80))),1:333]
Wifi1<-Wifi1[sapply(Wifi1,function(x) !all(x < (-80))),1:333]
rm(Wifi1)
#Wifi1<-Wifi[,sapply(Wifi[1:520],function(x) all(x==100))]
Wifi1<-Wifi[,sapply(Wifi[1:528],function(x) !all(x < (-80)))]
Wifi1<-Wifi1[sapply(Wifi1,function(x) !all(x < (-80))),1:333]
Wifi1<-Wifi1[sapply(Wifi1,function(x) !all(x < (-80))),1:323]
#Wifi1<-Wifi[,sapply(Wifi[1:520],function(x) all(x==100))]
Wifi1<-Wifi[,sapply(Wifi[1:528],function(x) !all(x < (-80)))]
tail(colnames(Wifi))
#Wifi1<-Wifi[,sapply(Wifi[1:520],function(x) all(x==100))]
Wifi1<-Wifi[,sapply(Wifi[1:528],function(x) !all(x < (-80)))]
#Wifi1<-Wifi1[sapply(Wifi1,function(x) !all(x < (-80))),]
Wifi1<-cbind(Wifi1,Wifi[,c(521,529,530)])
Wifi1<-cbind(Wifi1[,c(1:326,334,327:333,335:336)])
tail(colnames(Wifi1))
library(lubridate)
library(dplyr)
library(tidyr)
library(stats)
library(openair)
library(scales)
library(ggplot2)
library(reshape2)
library(forecast)
library(data.table)
library(plotly)
library(discretization)
library(arules)
library(caret)
library(tidyverse)
library(doParallel)
#Wifi<-Wifi[!colMeans(Wifi[1:520]< -80)]
#Wifi<-Wifi[,sapply(Wifi[1:465],function(x) !mean(Wifi[,x]<(-80)))]
#
#
haurein<-Wifi1%>%dplyr::select(USERID,UniquePosit)%>%
dplyr::group_by(USERID)%>%
summarize(UP00=sum(UniquePosit=="00"),
UP01=sum(UniquePosit=="01"),
UP02=sum(UniquePosit=="02"),
UP03=sum(UniquePosit=="03"),
UP10=sum(UniquePosit=="10"),
UP11=sum(UniquePosit=="11"),
UP12=sum(UniquePosit=="12"),
UP13=sum(UniquePosit=="13"),
UP20=sum(UniquePosit=="20"),
UP21=sum(UniquePosit=="21"),
UP22=sum(UniquePosit=="22"),
UP23=sum(UniquePosit=="23"),
UP24=sum(UniquePosit=="24"))
Building0<-subset(Wifi1,BUILDINGID ==0)
Building1<-subset(Wifi1,BUILDINGID ==1)
Building2<-subset(Wifi1,BUILDINGID ==2)
#
Building00<-subset(Wifi1, UniquePosit == "00")
Building01<-subset(Wifi1, UniquePosit == "01")
Building02<-subset(Wifi1, UniquePosit == "02")
Building03<-subset(Wifi1, UniquePosit == "03")
#
Building10<-subset(Wifi1, UniquePosit == "10")
Building11<-subset(Wifi1, UniquePosit == "11")
Building12<-subset(Wifi1, UniquePosit == "12")
Building13<-subset(Wifi1, UniquePosit == "13")
#
Building20<-subset(Wifi1, UniquePosit == "20")
Building21<-subset(Wifi1, UniquePosit == "21")
Building22<-subset(Wifi1, UniquePosit == "22")
Building23<-subset(Wifi1, UniquePosit == "23")
Building24<-subset(Wifi1, UniquePosit == "24")
View(Wifi1)
library(lubridate)
library(dplyr)
library(tidyr)
library(stats)
library(openair)
library(scales)
library(ggplot2)
library(reshape2)
library(forecast)
library(data.table)
library(plotly)
library(discretization)
library(arules)
library(caret)
library(tidyverse)
library(doParallel)
#
#Wifi2<-Wifi1[1:5000,]
#
####k-NN Model####
#____________________________________________Predict BUILDINGID_______________________________________
set.seed(123)
Train_Model<-createDataPartition(y=Wifi1$UniquePosit,p=.75,list = FALSE)
#str(Train_Model)
#TRAIN_Model
training<-Wifi1[Train_Model,]
testing<-Wifi1[-Train_Model,]
#nrow(training)
#nrow(testing)
kNNControl<-trainControl(method = "repeatedcv",#This_is_CROSS_VALIDATION
number = 3,
repeats = 3,
verboseIter = TRUE)#,#verbose =TRUE
knnFit<-train(UniquePosit~.,#alternative_being:_(brand~.,)
data = training,
method = "knn",
trControl=kNNControl,
tuneLength = 2) #,
#preProc = c("center", "scale"))
knnFit
#Predict
kNN_Predict<-predict(knnFit,newdata = testing)
#str(kNN_Predict)
#plot(knnFit)
kNN_Predict
kNN_Probs<-predict(knnFit,newdata = testing,type = "prob")
head(kNN_Probs)
confusionMatrix(data = kNN_Predict,testing$UniqueLocID)
#
postResample(kNN_Predict,testing$UniqueLocID)
#Apply the model to Validation data
kNN_Predict_Validation<-predict(knnFit,newdata = Wifi_Vald)
kNN_Predict_Validation
str(Wifi1$UniquePosit)
library(lubridate)
library(dplyr)
library(tidyr)
library(stats)
library(openair)
library(scales)
library(ggplot2)
library(reshape2)
library(forecast)
library(data.table)
library(plotly)
library(discretization)
library(arules)
library(caret)
library(tidyverse)
library(doParallel)
kNN_Predict_Validation
View(Wifi1)
unique(kNN_Predict_Validation)
class(Wifi1$UniquePosit)
labels(Wifi1$UniquePosit)
unique(labels(Wifi1$UniquePosit))
unique(levels(Wifi1$UniquePosit))
?as.factor
Wifi1$UniquePosit<-as.factor(Wifi1$UniquePosit,labels=levels)
Wifi1$UniquePosit<-as.factor(Wifi1$UniquePosit,levels=c("00","01","02","03","10","11","12","13","20","21","22","23","24"),labels=levels)
labels(Wifi1$UniquePosit)<-levels(Wifi1$UniquePosit)
Wifi1$UniquePosit<-as.factor(Wifi1$UniquePosit,levels=c("00","01","02","03","10","11","12","13","20","21","22","23","24"),labels=levels)
Wifi1$UniquePosit<-as.factor(Wifi1$UniquePosit,levels=c("00","01","02","03","10","11","12","13","20","21","22","23","24"),labels=c("00","01","02","03","10","11","12","13","20","21","22","23","24"))
labels(Wifi1$UniquePosit)<-levels(Wifi1$UniquePosit)
labels(Wifi1$UniquePosit)
str(Wifi1$BUILDINGID)
unique(labels(Wifi1$UniquePosit))
labels(Wifi1$UniquePosit)<-c("00","01","02","03","10","11","12","13","20","21","22","23","24")
labels.default(Wifi1$UniquePosit)
Wifi1$UniquePosit<-factor(c("00","01","02","03","10","11","12","13","20","21","22","23","24"))
Wifi1$UniquePosit<-as.factor(Wifi1$UniquePosit)
labels(Wifi1$UniquePosit)
#str(kNN_Predict)
#plot(knnFit)
kNN_Predict
View(Wifi_Vald)
kNN_Predict_Validation
#
WAPs<-grep("^WAP",names(Wifi1))
str(Wifi_Vald$UniquePosit)
knnFit<-train(UniquePosit~.,#alternative_being:_(brand~.,)
data = training[,c(WAPs,which(names(training)=="UniquePosit"))],
method = "knn",
trControl=kNNControl,
tuneLength = 2) #,
#preProc = c("center", "scale"))
knnFit
#Predict
kNN_Predict<-predict(knnFit,newdata = testing)
#str(kNN_Predict)
#plot(knnFit)
kNN_Predict
kNN_Probs<-predict(knnFit,newdata = testing,type = "prob")
confusionMatrix(data = kNN_Predict,testing$UniqueLocID)
#
postResample(kNN_Predict,testing$UniqueLocID)
confusionMatrix(data = kNN_Predict,testing)
confusionMatrix(data = kNN_Predict,testing$UniquePosit)
#
postResample(kNN_Predict,testing$UniqueLocID)
#
postResample(kNN_Predict,testing$UniquePosit)
#Apply the model to Validation data
kNN_Predict_Validation<-predict(knnFit,newdata = Wifi_Vald)
kNN_Predict_Validation
#
#______________________________________________RANDOM_FOREST___________________________________________
set.seed(111)
#
#______________________________________________RANDOM_FOREST___________________________________________
set.seed(111)
t0<-proc.time()[3]
RF_Fit<-train(UniquePosit~.,#alternative_being:_(brand~.,)
data = training[,c(WAPs,which(names(training)=="UniquePosit"))],
method = "rf",
ntree = 10,
#metric = "Accuracy",
trControl=kNNControl,
tuneLength = 3,
preProc = c("center", "scale"))
t0<-proc.time()[3]
RF_Fit<-train(UniquePosit~.,#alternative_being:_(brand~.,)
data = training[,c(WAPs,which(names(training)=="UniquePosit"))],
method = "rf",
ntree = 10,
#metric = "Accuracy",
trControl=kNNControl,
tuneLength = 3)
#preProc = c("center", "scale"))
t1<-proc.time()[3]
t2<-(t1-t0)
RF_Fit
#plot(RF_Fit)
#Predict
RF_Predict<-predict(RF_Fit,newdata = testing)
#plot(RF_Fit)
#Predict
RF_Predict<-predict(RF_Fit,newdata = testing)
RF_Fit
#plot(RF_Fit)
#Predict
RF_Predict<-predict(RF_Fit,newdata = testing)
#plot(RF_Fit)
#Predict
RF_Predict<-predict(RF_Fit,newdata = testing)
predict(RF_Fit,newdata = testing)
#plot(RF_Fit)
#Predict
RF_Predict<-predict(RF_Fit,newdata = testing)
rm(RF_Predict)
#plot(RF_Fit)
#Predict
RF_Predict<-predict(RF_Fit,newdata = testing)
summary(RF_Fit)
summary(testing)
View(knnFit)
View(RF_Fit)
RF_Fit
rm(RF_Fit)
rm(RF_Probs)
RF_Fit<-train(UniquePosit~.,#alternative_being:_(brand~.,)
data = training[,c(WAPs,which(names(training)=="UniquePosit"))],
method = "rf",
ntree = 10,
#metric = "Accuracy",
trControl=kNNControl,
tuneLength = 3)
RF_Fit
#plot(RF_Fit)
#Predict
RF_Predict<-predict(RF_Fit,newdata = testing)
#str(RF_Predict)
RF_Probs<-predict(RF_Fit,newdata = testing,type = "prob")
confusionMatrix(data = RF_Predict,testing$UniquePosit)
#
postResample(RF_Predict,testing$UniquePosit)
RF_Predict
#
RF_Predict_Validation<-predict(RF_Predict,newdata = Wifi_Vald)
Wifi_Vald[,ncol(Wifi_Vald)]<-as.POSIXct(Wifi_Vald[,ncol(Wifi_Vald)],origin='1970-01-01')
tail(Wifi_Vald)
#Prepare Validationset
Wifi_Vald[Wifi_Vald==100]<- (-100)
#Wifi1<-Wifi[,sapply(Wifi[1:520],function(x) all(x==100))]
Wifi_Vald_1<-Wifi_Vald[,sapply(Wifi_Vald[1:528],function(x) !all(x < (-80)))]
#Wifi1<-Wifi1[sapply(Wifi1,function(x) !all(x < (-80))),]
Wifi_Vald_1<-cbind(Wifi_Vald_1,Wifi_Vald[,c(521,529,530)])
View(Wifi_Vald_1)
#Apply the model to Validation data
kNN_Predict_Validation<-predict(knnFit,newdata = Wifi_Vald_1)
#Apply the model to Validation data
kNN_Predict_Validation<-predict(knnFit,newdata = Wifi_Vald)
kNN_Predict_Validation
postResample(kNN_Predict_Validation,testing$UniquePosit)
postResample(kNN_Predict_Validation,Wifi_Vald$UniquePosit)
#
RF_Predict_Validation<-predict(RF_Predict,newdata = Wifi_Vald)
rm(Wifi_Vald_1)
#
postResample(RF_Predict,testing$UniquePosit)
#
postResample(kNN_Predict,testing$UniquePosit)
RF_Predict_Validation
#
RF_Predict_Validation<-predict(RF_Predict,newdata = Wifi_Vald)
Wifi_Vald[sapply(Wifi_Vald,function(x) !all(x == (-100))),]
Wifi_Vald[sapply(Wifi_Vald,function(x) all(x == (-100))),]
Wifi_Vald<-Wifi_Vald[sapply(Wifi_Vald,function(x) all(x == (-100))),]
Wifi_Vald<-read.csv(file = "C:/Users/alexw/Desktop/Ubiqum/Section3/Task3_Wifi_fingerprinting/validationData.csv",header = TRUE)
Wifi_Vald[,ncol(Wifi_Vald)]<-as.POSIXct(Wifi_Vald[,ncol(Wifi_Vald)],origin='1970-01-01')
Wifi_Vald<-transform(Wifi_Vald,UniquePosit=paste0(BUILDINGID,FLOOR))
#__________________________________________________Prepare Validationset____________________________
Wifi_Vald[Wifi_Vald==100]<- (-100)
Wifi_Vald<-Wifi_Vald[sapply(Wifi_Vald,function(x) !all(x == (-100))),]
#
RF_Predict_Validation<-predict(RF_Predict,newdata = Wifi_Vald)
#______________________________________________Predict_LONGITUDE___________________________________
set.seed(123)
Train_Model_LONGIT<-createDataPartition(y=Wifi1$LONGITUDE,p=.75,list = FALSE)
#TRAIN_Model
training_LONGIT<-Wifi1[Train_Model_LONGIT,]
testing_LONGIT<-Wifi1[-Train_Model_LONGIT,]
#classProbs = TRUE)
#summaryFunction = twoClassSummary)
#RUN_MODEL
set.seed(111)
knnFit_LONGIT<-train(LONGITUDE~.,#alternative_being:_(brand~.,)
data = training_LONGIT[,c(WAPs,which(names(training)=="LONGITUDE"))],
method = "knn",
trControl=kNNControl,
tuneLength = 2) #,
library(lubridate)
library(dplyr)
library(tidyr)
library(stats)
library(openair)
library(scales)
library(ggplot2)
library(reshape2)
library(forecast)
library(data.table)
library(plotly)
library(discretization)
library(arules)
library(caret)
library(tidyverse)
library(doParallel)
#______________________________________________Predict_LONGITUDE___________________________________
set.seed(123)
Train_Model_LONGIT<-createDataPartition(y=Wifi1$LONGITUDE,p=.75,list = FALSE)
#TRAIN_Model
training_LONGIT<-Wifi1[Train_Model_LONGIT,]
testing_LONGIT<-Wifi1[-Train_Model_LONGIT,]
#
kNNControl<-trainControl(method = "repeatedcv",#This_is_CROSS_VALIDATION
number = 3,
repeats = 3,
verboseIter = TRUE)#,#verbose =TRUE
#classProbs = TRUE)
#summaryFunction = twoClassSummary)
#RUN_MODEL
set.seed(111)
knnFit_LONGIT<-train(LONGITUDE~.,#alternative_being:_(brand~.,)
data = training_LONGIT[,c(WAPs,which(names(training)=="LONGITUDE"))],
method = "knn",
trControl=kNNControl,
tuneLength = 2) #,
#preProc = c("center", "scale"))
knnFit_LONGIT
#Predict
kNN_Predict_LONGIT<-predict(knnFit_LONGIT,newdata = testing)
#str(kNN_Predict)
#plot(knnFit)
kNN_Predict_LONGIT
kNN_Probs_LONGIT<-predict(knnFit_LONGIT,newdata = testing,type = "prob")
confusionMatrix(data = kNN_Predict_LONGIT,testing$LONGITUDE)
RF_Predict
